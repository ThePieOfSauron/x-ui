name: Release X-UI
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (without v prefix)'
        required: true
        default: '0.3.3'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Get version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Using version: ${VERSION}"
      
      - name: Update version in config file if manual workflow
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "${{ steps.get_version.outputs.version }}" > config/version
          echo "Updated version to ${{ steps.get_version.outputs.version }}"
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
      
      - name: Cache Xray binaries
        uses: actions/cache@v3
        id: cache-xray
        with:
          path: xray_cache
          key: xray-binaries-${{ hashFiles('package.sh') }}
      
      - name: Create cache directory
        if: steps.cache-xray.outputs.cache-hit != 'true'
        run: mkdir -p xray_cache
      
      - name: Build packages
        run: |
          chmod +x package.sh
          ./package.sh
      
      - name: Setup GitHub CLI
        uses: cli/cli-action@v2
        
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.get_version.outputs.version }}
        run: |
          gh release create v${VERSION} \
            --title "X-UI v${VERSION}" \
            --notes "Release version ${VERSION} with improvements and bug fixes" \
            --draft
          
      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.get_version.outputs.version }}
        run: |
          VERSION_DIR="releases/v${VERSION}"
          
          # Upload SHA256SUMS
          gh release upload v${VERSION} "${VERSION_DIR}/SHA256SUMS"
          
          # Upload release packages
          gh release upload v${VERSION} "${VERSION_DIR}/x-ui-linux-amd64-${VERSION}.tar.gz"
          gh release upload v${VERSION} "${VERSION_DIR}/x-ui-linux-arm64-${VERSION}.tar.gz"
          gh release upload v${VERSION} "${VERSION_DIR}/x-ui-windows-amd64-${VERSION}.zip"